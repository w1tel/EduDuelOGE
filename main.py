import telebot
import logging
from dotenv import load_dotenv
import os
from inline_keyboards import (
    get_markup_main_menu,
    get_markup_test_menu,
    get_markup_settings_menu,
    get_markup_back_button,
)
from utils import register_user
from utils import is_registered
from utils import update_user
from utils import get_user
from utils import get_users
from questions import get_random_tasks
from questions import get_random_task
from constants import HELP_COMMAND_TEXT, START_MAIN_MENU_TEXT
from constants import RATING_TEXT_TEMPLATE
from utils import get_user_rank

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = telebot.TeleBot(TOKEN)

MAX_OF_TESTS = 5
STATE_NUM_OF_TESTS = "waitting_num_of_tests"
STATE_START = "main_menu"
STATE_WAITING_ANSWER = "waitting_answer"
STATE_SERIA_QUESTIONS = "seria_questions"


@bot.message_handler(commands=["start"])
def start_message(message):
    user_id = message.from_user.id

    logger.info(f"User {user_id} sent /start command")

    if not is_registered(user_id):
        logger.info(f"Registering new user: {user_id})")
        bot.send_message(user_id, "–ú—ã —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏üëå")
        user_data = {
            "username": message.from_user.username,
            "statistic": {"total_tests": 0, "correct_answers": 0, "success_rate": 0},
            "number_of_tests": 3,
            "state": STATE_START,
            "correct_answer_question": None,
            "seria_of_questions": [],
        }

        register_user(user_id, user_data)
    else:
        logger.info(f"User {user_id} is already registered")
        bot.send_message(user_id, "–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    # TODO –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Å–¥–∞—á–µ–π —ç–∫–∑–∞–º–µ–Ω–∞.  ")
    bot.send_message(
        user_id,
        START_MAIN_MENU_TEXT,
        reply_markup=get_markup_main_menu(),
    )


def get_seria_question(user):
    if user["seria_of_questions"]:
        question = user["seria_of_questions"][0]
        text_of_question = question["text"]
        correct_answer = question["correct_answer"]
        user["correct_answer_question"] = correct_answer
        return text_of_question
    return False


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    user = get_user(user_id)
    callback_data_type = type(call.data)
    logger.info(
        f"User {user_id} (type: {type(user_id)}) selected callback data: {call.data} (type: {callback_data_type})"
    )

    if call.data == "cb_test":
        bot.answer_callback_query(call.id)

        replace_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            new_text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            reply_markup=get_markup_test_menu(),
        )
    elif call.data == "cb_series":
        number_of_tests = user["number_of_tests"]

        bot.answer_callback_query(call.id, "–°–µ—Ä–∏—è")

        questions = get_random_tasks(number_of_tests)

        user["state"] = STATE_SERIA_QUESTIONS
        user["seria_of_questions"].clear()
        user["seria_of_questions"].extend(questions)
        update_user(user_id, user)
        # –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Ä–∏–∏
        # bot.send_message(call.message.chat.id, f'–ó–∞–¥–∞—á–∞ - 1/{number_of_tests}')
        # bot.send_message(call.message.chat.id, get_seria_question(user))
        ask_next_question(user=user, user_id=user_id, is_first=True)
    elif call.data == "cb_random":
        bot.answer_callback_query(call.id)
        random_question = get_random_task()

        bot.send_message(call.message.chat.id, random_question["text"])
        user["state"] = STATE_WAITING_ANSWER
        user["correct_answer_question"] = random_question["correct_answer"]

        update_user(user_id, user)
    elif call.data == "cb_stats":
        bot.answer_callback_query(call.id, "–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
        replace_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            new_text=get_raiting_text(user_id),
            reply_markup=get_markup_back_button(),
        )
    elif call.data == "cb_setting":
        bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        replace_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            new_text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=get_markup_settings_menu(),
        )
    elif call.data == "cb_number_of_tests":
        bot.answer_callback_query(call.id)
        replace_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            new_text=f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–Ω–æ {user['number_of_tests']} –≤–æ–ø—Ä–æ—Å(-–∞) —Å–µ—Ä–∏–∏\n–ù–∞–ø–∏—à–∏, —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∞—Ç—å –≤ '–°–µ—Ä–∏–∏'",
        )
        user["state"] = STATE_NUM_OF_TESTS
        update_user(user_id, user)
    elif call.data == "cb_back":
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º answer_callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.answer_callback_query(call.id)
        replace_message(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            new_text=START_MAIN_MENU_TEXT,
            reply_markup=get_markup_main_menu(),
        )


@bot.message_handler(commands=["help"])
def help_message(message):
    bot.send_message(message.chat.id, HELP_COMMAND_TEXT, parse_mode="HTML")


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞)
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    user_message = message.text
    logger.info(
        f"User {user_id} (type: {type(user_id)}) sent a message: {user_message} (type: {type(user_message)})"
    )
    user = get_user(user_id)
    current_state = user["state"]
    print(current_state)
    if current_state == STATE_WAITING_ANSWER:
        user_answer = message.text
        if user_answer == user["correct_answer_question"]:
            bot.send_message(user_id, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            user["statistic"]["correct_answers"] += 1
            user["statistic"]["total_tests"] += 1
        else:
            bot.send_message(user_id, f"–£–≤—ã, –æ—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π!")
            user["statistic"]["total_tests"] += 1
            user["state"] = STATE_START
        user["correct_answer_question"] = None
        user["statistic"]["success_rate"] = int(
            (user["statistic"]["correct_answers"] / user["statistic"]["total_tests"])
            * 100
        )
        print(user["statistic"]["success_rate"])
        print(user["statistic"]["correct_answers"])
        print(user["statistic"]["total_tests"])
        update_user(user_id, user)
        bot.send_message(
            chat_id=message.chat.id,
            text=START_MAIN_MENU_TEXT,
            reply_markup=get_markup_main_menu(),
        )
    elif current_state == STATE_SERIA_QUESTIONS:
        handle_series_answer(user=user, user_id=user_id, user_answer=message.text)
    elif current_state == STATE_NUM_OF_TESTS:
        print(user_message)
        if user_message.isdigit():
            if int(user_message) <= MAX_OF_TESTS:
                user["number_of_tests"] = int(user_message)
                update_user(user_id, user)
                bot.reply_to(message, "–û–∫–µ–π, —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ªüòé")
                user["state"] = STATE_START
                bot.send_message(
                    chat_id=message.chat.id,
                    text=START_MAIN_MENU_TEXT,
                    reply_markup=get_markup_main_menu(),
                )
            else:
                bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ø—Ä–æ—Å–æ–≤")
        else:
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")


def ask_next_question(user: dict, user_id: int, is_first: bool):
    """
    –ó–∞–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–µ—Ä–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - is_first: True, –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–∑–æ–≤ –¥–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      (—Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º "–ó–∞–¥–∞—á–∞ - 1/number_of_tests" –±–µ–∑ pop(0),
       –∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—â–µ –Ω–µ —É–¥–∞–ª—è–ª–∏)
    - –µ—Å–ª–∏ is_first=False, –∑–Ω–∞—á–∏—Ç –º—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
      –∏ —É–¥–∞–ª–∏–ª–∏ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏
      "–ó–∞–¥–∞—á–∞ - current_num/number_of_tests" –∏ —Ç.–ø.

    –õ–æ–≥–∏–∫–∞:
      1. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —É–¥–∞–ª—è–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (pop(0)).
      2. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è,
         –≤—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
      3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–∏—é.
    """
    total = user["number_of_tests"]

    # –®–∞–≥ 1. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π (—É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π).
    if not is_first and user["seria_of_questions"]:
        user["seria_of_questions"].pop(0)

    update_user(user_id, user)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –®–∞–≥ 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
    if user["seria_of_questions"]:
        # –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤
        left = len(user["seria_of_questions"])
        # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å = total - left + 1
        current_num = total - left + 1

        bot.send_message(user_id, f"–ó–∞–¥–∞—á–∞ - {current_num}/{total}")

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞
        question = user["seria_of_questions"][0]
        user["correct_answer_question"] = question["correct_answer"]
        update_user(user_id, user)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        bot.send_message(user_id, question["text"])
    else:
        # –®–∞–≥ 3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Å–µ—Ä–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        bot.send_message(user_id, "–í–æ–ø—Ä–æ—Å—ã –≤ —Å–µ—Ä–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        user["state"] = STATE_START
        update_user(user_id, user)
        bot.send_message(
            chat_id=user_id,
            text=START_MAIN_MENU_TEXT,
            reply_markup=get_markup_main_menu(),
        )


def handle_series_answer(user: dict, user_id: int, user_answer: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É,
    –ª–∏–±–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é (–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å).
    """
    correct = user_answer == user["correct_answer_question"]

    if correct:
        bot.send_message(user_id, "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        user["statistic"]["correct_answers"] += 1
    else:
        bot.send_message(user_id, "–£–≤—ã, –æ—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π!")

    user["statistic"]["total_tests"] += 1
    user["correct_answer_question"] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —Ç.–∫. –æ—Ç–≤–µ—Ç —É–∂–µ –¥–∞–Ω
    user["statistic"]["success_rate"] = int(
        user["statistic"]["correct_answers"] / user["statistic"]["total_tests"] * 100
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É (–∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º)
    ask_next_question(user, user_id, is_first=False)


def replace_message(
    chat_id, message_id, new_text, reply_markup=None, parse_mode="HTML"
):
    """
    –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ chat_id –∏ message_id,
    –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.delete_message(chat_id=chat_id, message_id=message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = bot.send_message(
        chat_id=chat_id, text=new_text, reply_markup=reply_markup, parse_mode=parse_mode
    )
    return sent_message


def get_raiting_text(user_id):
    user = get_user(user_id)
    users = get_users()
    total_tests = user["statistic"]["total_tests"]
    correct_tests = user["statistic"]["correct_answers"]
    ranking_position = get_user_rank(users, user_id)
    total_users = len(get_users())
    percentage = (correct_tests / total_tests * 100) if total_tests > 0 else 0

    return RATING_TEXT_TEMPLATE.format(
        ranking_position, total_users, correct_tests, total_tests, round(percentage, 2)
    )


bot.infinity_polling()
